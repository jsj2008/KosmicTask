{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 TrebuchetMS;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red102\green102\blue102;\red0\green0\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs36 \cf2 Mugginsoft\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs28 \cf0 Usage\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 Python Cocoa tasks access the Cocoa framework via the PyObjC bridge. \
\
PyObjC provides a bridge between the 
\f1\fs30 Python and Objective-C programming languages. 
\f0\fs28 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 \
Calling the Task Run Function
\b0 \
\
The entry point for Python Cocoa task can be a simple named function. The name of this function is configured using the 
\b\fs24 Run Function
\b0\fs28  task setting. Alternatively the entry point may consist of a named function within a named class. The class name is configured using the 
\b\fs24 Run Class
\b0\fs28  task setting.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 import Foundation\
\
class KosmicTask (Foundation.NSObject):\
    	\
	#\
	# task entry point\
	#\
	def kosmictask(self):\
		return "Hello, kosmos!"
\f0\fs28 \cf0 \
\
 When the task is executed the run class is instantiated and the run function is called.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Result Objects
\b0 \
\
Tasks written in Python Cocoa can return native Python objects or Cocoa objects as task results. The PyObjC bridge ensures that all objects are coerced as required.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 import AppKit\
\
def kosmictask():\
\
	# call Cocoa and return NSString\
	return AppKit.NSString.stringWithString_("Hello, kosmos!")\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Result File Handling\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
KosmicTask supports the returning of file contents within task results. \
\
KosmicTask automatically looks for a 
\f2\fs22 \cf3 kosmicFile
\f0\fs28 \cf0  record containing file paths within a dictionary type result object. If found, KosmicTask will return the contents of the file or files to the client.\
\
For Python Cocoa powered tasks files are returned as results using the following syntax:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 \
result = \{\}\
result["kosmicFile"] = path\
return result
\f0\fs28 \cf0 \
\
A common usage scenario is that a task creates a temporary file (or files) whose contents are then returned to the client. KosmicTask therefore supports automatic temporary file creation and deletion. Temporary files created through KosmicTask are automatically deleted once the parent task has completed.\
\
Python Cocoa powered tasks can create temporary files by calling the KosmicTaskController 
\f2\fs22 \cf3 resultFileWithName_
\f0\fs28 \cf0  function.\
\

\f2\fs22 \cf3 import os\
import Foundation\
\
# KosmicTask controller\
taskController = Foundation.NSClassFromString("KosmicTaskController")\
\
def kosmictask():\
\
	# create path to temp result file from taskController.\
	# this file will be automatically deleted when the task ends.\
	#\
	# an alternative would be:\
	# fileno, path = tempfile.mkstemp(suffix='.png', prefix='capture')\
	# os.close(fileno)\
   	#\
	path = taskController.resultFileWithName_('capture.png');\
    \
	# capture sceen shot to file\
	os.system("screencapture -t png " + path)\
\
	# form our result dictionary\
	result = \{\}\
	result["kosmicFile"] = path\
	result["kosmicInfo"] = "file returned"\
	\
	# return object\
	return result
\f0\fs28 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Logging and Debugging\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
Diagnostic and logging information can be written to a task's error stream using 
\f2\fs22 \cf3 AppKit.NSLog()
\f0\fs28 \cf0 . \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 # send log value to stderr\
AppKit.NSLog("Goodbye, kosmos!")
\f0\fs28 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 NSObject Subclassing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
Python objects can be subclassed directly from Cocoa's NSObject \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 import Foundation\
\
class KosmicTask (Foundation.NSObject):\
    	\
	#\
	# task entry point\
	#\
	def kosmictask(self):\
	\
		# return python string\
		return "Hello, kosmos!"
\f0\fs28 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Runloop Management
\b0 \
\
When an Python Cocoa task is run the script runner is transformed into a fully fledged application complete with a run loop (an instance of NSRunLoop). This enables the task to utilise all the features of the Cocoa framework, many of which depend upon the existence of a run loop in order to perform correctly. As a result of its application based nature a task written in PyObjC will probably take longer to launch and consume more system resources than a regular Python task.\
\
By default however the PyObjc task will exit its run loop whenever the task entry point exits unless it is requested to do otherwise. This is the case in the example above.\
\
In order for the task to continue executing it is necessary to tell the task controller object (KosmicTaskController ) to keep the task running after the script entry point function has returned. KosmicTaskController is a predefined class that can be accessed within the task script by using the statement 
\f2\fs22 \cf3 taskController = Foundation.NSClassFromString("KosmicTaskController")
\f0\fs28 \cf0 .\
\
To keep the task running call the KosmicTaskController 
\f2\fs22 \cf3 keepTaskRunning
\f0\fs28 \cf0  static method. The task will then continue to process input events on its runloop until the KosmicTaskController 
\f2\fs22 \cf3 stopTask_
\f0\fs28 \cf0  static method is called. The task will then end and return its result to the client.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 import AppKit\
import Foundation\
\
# create KosmicTask controller class object\
taskController = Foundation.NSClassFromString("KosmicTaskController")\
\
class KosmicTask (Foundation.NSObject):\
    	\
	#\
	# task entry point\
	#\
	def kosmictask(self):\
\
		# schedule the timer\
		AppKit.NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(2, self, "timerFired:", "", 1)\
\
		# keep the task running\
		taskController.keepTaskRunning()\
	\
		# the task will not exit when this function returns\
		return\
		\
	#\
	# task timer expired\
	#\
	def timerFired_(self,timer):\
		\
		# invalidate the timer\
		timer.invalidate()\
		\
		# stop task and return result\
		taskController.stopTask_("timer expired")\
	\
		return
\f0\fs28 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 System Framework Access
\b0 \
\
Python Cocoa tasks can access system framework classes simply by importing them by name.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 # import our system framework by name\
import AddressBook\
\
def kosmictask():\
	\
	person = AddressBook.ABAddressBook.sharedAddressBook().me()\
	firstName = person.valueForProperty_(AddressBook.kABFirstNameProperty)\
	\
	# return object\
	return firstName
\f0\fs28 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Syntax Checking
\b0 \
\
Python does not possess an in-built syntax checker. Whenever a Python Cocoa task is built the syntax is checked using the third party pyflakes tool. This is included as part of KosmicTask. For more information see {\field{\*\fldinst{HYPERLINK "http://divmod.org/trac/wiki/DivmodPyflakes"}}{\fldrslt http://divmod.org/trac/wiki/DivmodPyflakes}}.\
\
\

\b Python appscript\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
See the Python Usage document. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf0 v1.0 November 2010}