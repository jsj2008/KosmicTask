/*

Created by {{ author }} on {% now | date_format: "dd MMM yyyy HH:mm:ss" %}

Script: {{ script }}

Credits: 

Notes:

*/
#include <iostream>
#include <string>
#include <unistd>

class KosmicTask {  
	public:           
  	
  	KosmicTask() { 
  		 		
  		// define result
  		string result = "kosmicFile:\n";
  		
  		// define error
  		string error = "An error has occurred";
  		
  		// define command
		string command = "screencapture";
			
		try {
			
			for (int i = 1; i <= 5; i++) {
						
				// log command
		  		clog << "Running " << command << " command...\n";
		  		
				// capture screen image to file
				// files created in the current directory will be deleted when the task ends
				ostringstream fileStream;
				fileStream << "capture-" << i << ".png";
				string file = fileStream.str();
				
		  		// build command buffer
				string cmdbuf = command + " -t png " + file;
	  		
				// execute command
				int status = system(cmdbuf.c_str());
			
				// check for errors
				if (status != 0) {
									
					error = "Error running " + command;
									
					// throw exception
					throw error;	
				}		
				
				// append file as YAML block array element
				result += " - " + file + "\n";
			
				 // log wait
	  			clog << "Waiting...\n";
	  		
				sleep(1);
			}
			
			result += "kosmicName: " + command + "\n";
			result += "kosmicInfo: files returned";
	
		} catch (...) {
  			
			// form error result
			result = "kosmicError: " + error; 
  			
  		}
	
		// print result
		cout << "---\n";
  		cout << result;
  	}   

};
 
int main(int argc, char *argv[]) 
{
	KosmicTask kosmic;
}