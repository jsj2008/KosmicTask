"

Created by {{ author }} on {% now | date_format: 'dd MMM yyyy HH:mm:ss' %}

Script: {{ script }}

Credits:

Notes:

"
[
	" define our class"
	KosmicTask : NSObject
	{ 	
		" instance variables "
		timer
		delayRepeat
		delayTime
		repeatCounter
	
   		" start "
   		- start
   		{
   			delayRepeat := 3.
   			delayTime := 2.
   			repeatCounter := 0.
   			
   			" log timer "
			stderr print:'Timer started...\n'.
		
       		" schedule the timer "
       		" note that the target is a block and the selector is a block in compact form "
       		" #value is equivalent to [:a | a value] "
			timer := NSTimer scheduledTimerWithTimeInterval: 2 target:[self timerFired:timer] selector: #value  userInfo: nil repeats: true.
						
			" use kosmicTaskController to keep our task alive"
			KosmicTaskController keepTaskRunning.
   		}
   		
   		" timer fired "
   		- (void)timerFired:(NSTimer *)aTimer
   		{
   			" log timer expired"
			stderr print:'Timer expired...\n'.
			
   			repeatCounter := repeatCounter + 1.
   			
   			repeatCounter >= delayRepeat ifTrue:
   			[
   				" "
   				timer invalidate.
   				
   				" stop our task and return result "
   				KosmicTaskController stopTask: 'Task completed.'.
   			]
   		}
	}.

	" create new class instance "
	task := KosmicTask new.

	" call our entry point "
	task start.
]