{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf290
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 TrebuchetMS;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red102\green102\blue102;\red0\green0\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs36 \cf2 Mugginsoft\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0\fs24 \cf0 \

\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Usage\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 JavaScript Cocoa tasks access the Cocoa framework via the JSCocoa bridge. \
\
JSCocoa provides a bridge between the 
\f1\fs30 JavaScript and Objective-C programming languages. 
\f0\fs28 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Limitations 
\b0 \
\
JavaScript prohibits access to the operating system.\
\
However, using JSCocoa it is possible to escape the sandbox and access the operating system directly, for example, to permit file access or launch new processes using NSTask.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 function kosmicTask() \
\{\
	\
 	// form our image file result path\
 	// this file will be automatically deleted when the task ends.\
	var path = KosmicTaskController.resultFileWithName('capture.png');\
	\
	// capture screen shot to file\
	var task = NSTask.launchedTaskWithLaunchPath_arguments('/usr/sbin/screenCapture', ['-t', 'png', path]);\
	task.waitUntilExit;\
\
	// form result dictionary \
	var result = \{kosmicFile: path\};\
			\
	return result\
\
\}
\f0\fs28 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Calling the Task Run Function
\b0 \
\
KosmicTask JavaScript powered tasks are initiated by calling the 
\b\fs24 Run Function
\b0\fs28  defined in the task Settings. In the following example the task 
\b\fs24 Run Function
\b0\fs28  is set to 
\f2\fs22 \cf3 kosmicTask
\f0\fs28 \cf0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 function kosmicTask() \
\{\
	// return our string result\
	return 'Hello, kosmos!';\
\}\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 Result Objects
\b0 \
\
Tasks written in JavaScript Cocoa can return native JavaScript objects or Cocoa objects as task results. The JSCocoa bridge ensures that all objects are coerced as required.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 function kosmicTask() \
\{\
	// return NSArray\
	return NSArray.arrayWithArray(["item 1", "item 2"])\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Result File Handling\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
KosmicTask supports the returning of file contents within task results. \
\
KosmicTask automatically looks for a 
\f2\fs22 \cf3 kosmicFile
\f0\fs28 \cf0  record containing file paths within a dictionary type result object. If found, KosmicTask will return the contents of the file or files to the client.\
\
For JavaScript Cocoa powered tasks files are returned as results using the following syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 var result = \{kosmicFile: path\};
\f0\fs28 \cf0 \
\
A common usage scenario is that a task creates a temporary file (or files) whose contents are then returned to the client. KosmicTask therefore supports automatic temporary file creation and deletion. Temporary files created through KosmicTask are automatically deleted once the parent task has completed.\
\
JavaScript Cocoa powered tasks can create temporary files by calling the KosmicTaskController 
\f2\fs22 \cf3 resultFileWithName
\f0\fs28 \cf0  function.\
\

\f2\fs22 \cf3 function kosmicTask() \
\{\
	\
 	// form our image file result path\
 	// this file will be automatically deleted when the task ends.\
	var path = KosmicTaskController.resultFileWithName('capture.png');\
	\
	// capture screen shot to file\
	var task = NSTask.launchedTaskWithLaunchPath_arguments('/usr/sbin/screenCapture', ['-t', 'png', path]);\
	task.waitUntilExit;\
\
	// form result dictionary \
	var result = \{kosmicFile: path\};\
			\
	return result\
\
\}
\f0\fs28 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 NSObject Subclassing\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
JavaScript Cocoa objects can be subclassed directly from Cocoa's NSObject \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 // define the Person class\
class Person < NSObject\
\{\
    // init method\
    - (void)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName\
    \{\
  		this.firstName = firstName\
  		this.lastName = lastName     \
        return this          \
    \}\
    \
    // description method\
    - (NSString *)description\
    \{\
        return this.firstName + " " + this.lastName\
    \}\
\}
\f0\fs28 \cf0 \
\
This is a unique syntax used to define Cocoa objects and closely mirrors objective-C. A similiar syntax is used in Objective-J and JSTalk. Prior to task execution this syntax is converted to valid JavaScript.\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Runloop Management
\b0 \
\
When an JavaScript Cocoa task is run the script runner is transformed into a fully fledged application complete with a run loop (an instance of NSRunLoop). This enables the task to utilise all the features of the Cocoa framework, many of which depend upon the existence of a run loop in order to perform correctly. As a result of its application based nature a task written in JSCocoa will probably take longer to launch and consume more system resources than a regular JavaScript task.\
\
By default however the JSCocoa task will exit its run loop whenever the task entry point exits unless it is requested to do otherwise. This is the case in the example above.\
\
In order for the task to continue executing it is necessary to tell the task controller object (KosmicTaskController ) to keep the task running after the script entry point function has returned. KosmicTaskController is a predefined class that can be accessed by name within the task script .\
\
To keep the task running call the KosmicTaskController 
\f2\fs22 \cf3 keepTaskRunning
\f0\fs28 \cf0  static method. The task will then continue to process input events on its runloop until the KosmicTaskController 
\f2\fs22 \cf3 stopTask
\f0\fs28 \cf0  static method is called. The task will then end and return its result to the client.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 // define class\
class KosmicTask < NSObject\
\{\
    // start method\
    - (void)start\
    \{\
    	var selector = @selector(timerFired:)\
  		this.timer = NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(1, this, selector, nil, true)\
  		this.count = 0\
  		\
  		// keep the task running after the entry point function exits\
  		KosmicTaskController.keepTaskRunning      \
    \}\
    \
    // callback method\
    - (void)timerFired:(NSTimer *)timer\
    \{\
        this.count++\
        if (this.count == 5) \{\
        	timer.invalidate\
        	KosmicTaskController.stopTask("timer expired " + this.count + " times")\
        \}\
    \}\
\}\
\
// task entry point\
function kosmicTask() \
\{\
	// allocate a task object\
	var task = KosmicTask.instance\
	\
	// start the task\
	task.start\
\}\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 System Framework Access
\b0 \
\
JavaScript Cocoa tasks can access system framework classes using the 
\f2\fs22 \cf3 loadFramework
\f0\fs28 \cf0  function.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs22 \cf3 // load the AddressBook framework\
loadFramework("AddressBook")\
	\
function kosmicTask() \
\{\
	// access the me object in the shared address book\
	var person = ABAddressBook.sharedAddressBook.me\
	\
	// get the first name property\
	result = person.valueForProperty(kABFirstNameProperty)\
	\
	return result\
\}
\f0\fs28 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 Syntax Checking
\b0 \
\
Syntax checking is provided by JSLint which is included as part of JSCocoa.\
\
Note that JSLint will rewrite the syntax used to implement Cocoa class creation. The rewritten code may be referenced in any build error reports.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf0 v1.0 December 2010}