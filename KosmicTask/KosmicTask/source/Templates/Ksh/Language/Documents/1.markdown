
The [Korn shell](http://kornshell.com/) is an alternative Unix shell for OS X.

Calling the Task Run Function
-----------------------------

Arguments are passed to Korn shell powered tasks as direct parameters rather than through a named entry point function. The task parameters are forwarded to the task script as command line arguments.


Result Objects
--------------

Korn shell tasks return results to the client by printing to stdout.

To return structured data, including the contents of files, Korn shell powered tasks should format result data using [YAML](http://en.wikipedia.org/wiki/YAML).

KosmicTask supports both the YAML inline and block formats.

	# return a YAML inline format dictionary
	echo "---"
	echo "{key1: item 1, key2: item 2}"

Result File Handling
--------------------

KosmicTask supports the returning of file contents within task results. 

KosmicTask automatically looks for a **kosmicFile** record containing file paths within a dictionary type result object. If found, KosmicTask will return the contents of the file or files to the client.

For Korn shell powered tasks files are returned as results using the following YAML dictionary syntax:

	FILE="capture.png"
	echo "---"
	echo "{kosmicFile: $FILE}"

A common usage scenario is that a task creates a temporary file (or files) whose contents are then returned to the client. KosmicTask therefore supports automatic temporary file creation and deletion. Temporary files created through KosmicTask are automatically deleted once the parent task has completed.

Korn shell powered tasks can create temporary files simply by creating files in the current working directory.

	# capture screen image to file
	# files created in the current directory will be deleted when the task ends
	FILE="capture.png"
	
	# capture screen
	screencapture -t png $FILE
	
	# return a YAML inline format dictionary
	echo "---"
	echo "{kosmicFile: $FILE, kosmicInfo: file returned}"

Logging and Debugging
---------------------

Diagnostic and logging information can be written to a task's error stream on /dev/stderr. 

	# send log value to stderr
	echo "Goodbye, kosmos!" >/dev/stderr
