{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf290
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red102\green102\blue102;\red0\green0\blue255;\red255\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs36 \cf2 Mugginsoft\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b\fs28 \cf0 Usage\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 Ruby is a dynamic general purpose object-orientated programming language.
\b \
\
\
Calling the Task Run Function
\b0 \
\
Arguments are passed to Ruby powered tasks as direct parameters rather than through a named entry point function. The task parameters are forwarded to the task script as command line arguments.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 \
Result Objects
\b0 \
\
Ruby tasks return results to the client by printing to stdout.\
\
To return structured data, including the contents of files, Ruby powered tasks should format result data using YAML. KosmicTask supports both the YAML inline and block formats.\
\
Ruby tasks may either print YAML strings directly or make use of the provided 
\f1\fs22 \cf3 KosmicTaskController
\f0\fs28 \cf0  class. This class provides a static convenience function that prints native Ruby objects such as arrays and dictionaries as YAML formatted strings.\

\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\b0\fs22 \cf3 require "KosmicTaskController"\
\
# build the planets\
Planets = Array["Mercury", "Venus", "Earth", "Mars", "Jupiter"]\
Planets.push("Saturn")\
Planets.push("Uranus")\
Planets.push("Neptune")\
\
# print native object as YAML\
KosmicTaskController.printObject(Planets)
\f0\fs28 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 \
Result File Handling\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
KosmicTask supports the returning of file contents within task results. \
\
KosmicTask automatically looks for a 
\f1\fs22 \cf3 kosmicFile
\f0\fs28 \cf0  record containing file paths within a dictionary type result object. If found, KosmicTask will return the contents of the file or files to the client.\
\
For Ruby powered tasks files are returned as results using the following YAML dictionary syntax:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs22 \cf3 file = "capture.png"\
puts "--- \{kosmicFile: #\{file\}\}"
\f0\fs28 \cf0 \
\
A common usage scenario is that a task creates a temporary file (or files) whose contents are then returned to the client. KosmicTask therefore supports automatic temporary file creation and deletion. Temporary files created through KosmicTask are automatically deleted once the parent task has completed.\
\
Ruby powered tasks can create temporary files simply by creating files in the current working directory.\
\

\f1\fs22 \cf3 # file created in task current directory will be automatically deleted\
file = "capture.png"\
    \
# capture sceen shot to file\
system "screencapture -t png " + file\
    \
# return a YAML inline format dictionary with filename\
result = "\{kosmicFile: #\{file\}, kosmicInfo: file returned\}"\
\
puts "---"\
puts result
\f0\b\fs28 \cf0 \
\
\
Ruby appscript\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 Ruby appscript provides a means of sending AppleEvents from ruby to scriptable applications. In many cases using rb-appscript will provide superior script compatibility than the Scripting Bridge. rb-appscript is included as part of the KosmicTask Ruby language plug-in.\
\
From the Ruby appscript documentation introduction :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs20 \cf4 start quote\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
Ruby appscript (rb-appscript) is an easy-to-use Apple event bridge that allows 'AppleScriptable' applications to be controlled by ordinary Ruby scripts. Appscript makes Ruby an excellent alternative to Apple's own AppleScript language for automating your Mac.\
\
For example, to get the value of the first paragraph of the topmost document in TextEdit:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs22 \cf3 app('TextEdit').documents[1].paragraphs[1].get
\f0\fs28 \cf0 \
\
This is equivalent to the AppleScript statement:\
\

\f1\fs22 \cf3 tell application "TextEdit"\
    get paragraph 1 of document 1\
end tell
\f0\fs28 \cf0 \
\
The following script uses appscript to create a new "Hello World!" document in TextEdit:\
\

\f1\fs22 \cf3 #!/usr/bin/env ruby\
\
require "appscript"\
include Appscript\
\
app('TextEdit').documents.end.make(\
    :new => :document,\
    :with_properties => \{:text => "Hello World!\\n"\}\
    )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs20 \cf4 end quote
\f0\fs28 \cf0 \
\
More information see the rb-appscript documentation at {\field{\*\fldinst{HYPERLINK "http://appscript.sourceforge.net/rb-appscript/doc/appscript-manual/index.html"}}{\fldrslt http://appscript.sourceforge.net/rb-appscript/doc/appscript-manual/index.html}}\
\
Matt Neuburg has also released an online book covering rb-appscript at {\field{\*\fldinst{HYPERLINK "http://www.apeth.com/rbappscript/00intro.html"}}{\fldrslt http://www.apeth.com/rbappscript/00intro.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 \
\
Scripting Bridge\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 \
From the Apple Scripting Bridge reference document :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs20 \cf4 start quote\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
\pard\pardeftab720\sa200\ql\qnatural
\cf0 Scripting Bridge is a technology that you can use in PyObjC and RubyCocoa scripts to communicate with scriptable applications\'97that is, applications with scripting interfaces compliant with the Open Scripting Architecture (OSA). With Scripting Bridge, RubyCocoa and PyObjC scripts can do what AppleScript scripts can do: control scriptable applications and exchange data with them. \
The Scripting Bridge framework implements a bridge between OSA and the Objective-C runtime. It reads the scripting definition of applications and dynamically populates the Objective-C namespace with objects and methods representing the various items it finds (scripting objects, elements, commands, properties, and so on). RubyCocoa and PyObjC are also bridges to the Objective-C runtime and thus have access to everything in a program\'92s namespace, including Scripting Bridge\'96created objects.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs20 \cf4 end quote\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf0 \
For more information see the Apple Reference document at {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/RubyPythonCocoa/Articles/UsingScriptingBridge.html"}}{\fldrslt http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/RubyPythonCocoa/Articles/UsingScriptingBridge.html}}
\b \
\

\b0\fs24 v1.0 November 2010}