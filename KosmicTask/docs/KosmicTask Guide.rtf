{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 TrebuchetMS;
\f3\fswiss\fcharset0 ArialMT;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red76\green76\blue76;\red135\green174\blue0;\red60\green60\blue60;
\red0\green0\blue153;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\margb1800\margt1800
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\f0\fs18 \cf0 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec0 \
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf2 \expnd0\expndtw0\kerning0
\strokec2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\strokec0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sa300\pardirnatural

\f1\b\fs72 \cf3 \kerning1\expnd8\expndtw43
\strokec3 KosmicTask
\f2 \kerning1\expnd8\expndtw43
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\f1\b0\fs24 \cf4 \expnd0\expndtw0\kerning0
\strokec4 The Secure Integrated Scripting Environment for OS X\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sa300\pardirnatural

\b\fs36 \cf3 \kerning1\expnd4\expndtw21
\strokec3 Guide\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 Updated March 20\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li0\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 
\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Overview\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 \
KosmicTask is a Secure Integrated Scripting Environment for OS X.\
\
KosmicTask can create, edit, execute and share script based tasks using a wide range of scripting languages.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask is available as a time limited trial. After the trial version expires you will be able to read but not execute any tasks that you have created until a full licence is purchased and installed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 System Requirements\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls1\ilvl0
\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	\'95	}Mac OS X 10.6\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\sa800\pardirnatural
\ls1\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	\'95	}50 MB free hard disk space\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Getting Support\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 Their are a number of ways to request support for KosmicTask.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Application.
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4  From the application menu select 
\b \expnd0\expndtw0\kerning0
KosmicTask - Feedback and Support...
\b0 \expnd0\expndtw0\kerning0
\
\

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Forum
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4 . Visit the the support forum at {\field{\*\fldinst{HYPERLINK "http://forum.mugginsoft.com"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \strokec5 forum.mugginsoft.com}}\
\

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Website.
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4  Visit the support website at {\field{\*\fldinst{HYPERLINK "http://www.mugginsoft.com/kosmictask/support"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \strokec5 www.mugginsoft.com/kosmictask/support\
}}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf4 \strokec4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Email.
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4  Send an email request to {\field{\*\fldinst{HYPERLINK "mailto:support@mugginsoft.com"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \strokec5 support@mugginsoft.com}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Task Based Scripting\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 A Task contains a script and a list of the inputs that it requires. When a task is executed the user is queried for the task inputs, the task is executed and the results are returned to the user.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 Tasks may be published, enabling them to be accessed and executed by any other network connected KosmicTask user. In addition, users that are able to authenticate over the network will be able to create, edit and execute tasks on the remote machine.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Quick Guide to Running Tasks\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 To run a task simply select it from the left hand sidebar. Enter any inputs that are required and click either the large green run button or the run button the menu bar. Task results will be displayed in the adjoining pane. To save the task results select 
\b \expnd0\expndtw0\kerning0
File
\b0 \expnd0\expndtw0\kerning0
 - 
\b \expnd0\expndtw0\kerning0
Save
\b0 \expnd0\expndtw0\kerning0
 
\b \expnd0\expndtw0\kerning0
As
\b0 \expnd0\expndtw0\kerning0
\'85 from the menu.\
\
Initially only tasks available to all users will be displayed (this is is the 
\b \expnd0\expndtw0\kerning0
Public
\b0 \expnd0\expndtw0\kerning0
 task view). To access all tasks on the machine select the 
\b \expnd0\expndtw0\kerning0
User
\b0 \expnd0\expndtw0\kerning0
 task view above the sidebar.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 To run tasks on another machine simply select the machine name and the required task from the sidebar. To access user tasks on the remote machine you will be asked to authenticate. Enter a valid OS X username and password. By default all exchanges with remote machines are secure.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Quick Guide to Creating Tasks\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 To create a task select the 
\b \expnd0\expndtw0\kerning0
Admin
\b0 \expnd0\expndtw0\kerning0
 task view and click 
\b \expnd0\expndtw0\kerning0
New
\b0 \expnd0\expndtw0\kerning0
 on the toolbar.\
Then, in the displayed 
\b \expnd0\expndtw0\kerning0
Edit
\b0 \expnd0\expndtw0\kerning0
 window:\
\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls2\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	1.	}Enter task name, script type, group and description in the first pane.\
{\listtext	2.	}If the Task requires inputs click + to add. Enter the input name and select its type.\
{\listtext	3.	}Click Edit button in the toolbar and select a template from the displayed list. Edit the task.\
{\listtext	4.	}Build the task if required (it is optional for some task types).\
{\listtext	5.	}Click the Run button to display the test pane.\
{\listtext	6.	}Run and test the task.\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\sa800\pardirnatural
\ls2\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	7.	}Close the Edit window and click Save to save the task.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Quick Usage Guide\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask can be used in a wide range of different situations and has features that appeal to various classes of users.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b \cf3 \expnd0\expndtw0\kerning0
\strokec3 Home. 
\b0 \cf4 \expnd0\expndtw0\kerning0
\strokec4 Use KosmicTask on a single Mac or home network to carry out repetitive administration and automation tasks. Non technical users can easily utilise existing tasks. More technical users will find that there is a wealth of scripts available on the Internet that they can easily adapt to their purpose.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Business
\f1\b0 \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 .\cf4 \expnd0\expndtw0\kerning0
\strokec4  KosmicTask is an effective tool for sharing business automation tasks with end users. Document processing, file processing and automation based services can all be configured from within the application and shared out to clients on the network.\
\

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Education
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4 . KosmicTask provides a great way of introducing students to a wide range of scripting languages. The application comes with a range of both native OS X and embedded scripting languages. Students can develop and test scripts on own machine whilst educators can review and appraise their tasks via the network.\
\

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 System Administration.
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4  Systems and network administrators will find that the application is a convenient and secure method of providing user scripts and performing script based network maintenance.\
\

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Software Development.
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4  Developers can use KosmicTask to quickly prototype code ideas. It is also useful for building and organizing a library of executable code samples and snippets.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural

\f3\b \cf3 \expnd0\expndtw0\kerning0
\up0 \strokec3 Science and Technology.
\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\up0 \strokec4  The distributed task model means that the application is ideally suited to data acquisition and processing projects. Tasks can be configured to collect and process data on the remote target before returning the results for further analysis and persistence.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Application Architecture\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 \
KosmicTask is implemented using a multi tier architecture:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b \cf3 \expnd0\expndtw0\kerning0
\strokec3 Tier 1:
\b0 \cf4 \expnd0\expndtw0\kerning0
\strokec4  KosmicTask Client User Interface\

\b \cf3 \expnd0\expndtw0\kerning0
\strokec3 Tier 2:
\b0 \cf4 \expnd0\expndtw0\kerning0
\strokec4  KosmicTask Server\

\b \cf3 \expnd0\expndtw0\kerning0
\strokec3 Tier 3:
\b0 \cf4 \expnd0\expndtw0\kerning0
\strokec4  KosmicTask Task Runner\

\b \cf3 \expnd0\expndtw0\kerning0
\strokec3 Tier 4:
\b0 \cf4 \expnd0\expndtw0\kerning0
\strokec4  Script Language Executable\
\
The interaction between the tier is as follows;\uc0\u8232 \
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls3\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	1.	}Users interact with the application at 
\b \expnd0\expndtw0\kerning0
Tier 1
\b0 \expnd0\expndtw0\kerning0
 to create, edit and execute tasks.\
{\listtext	2.	}The server in 
\b \expnd0\expndtw0\kerning0
Tier 2
\b0 \expnd0\expndtw0\kerning0
 receives requests from clients on 
\b \expnd0\expndtw0\kerning0
Tier 1
\b0 \expnd0\expndtw0\kerning0
 (both local and remote) to create and execute tasks.\
{\listtext	3.	}Each supported scripting language has an associated Task Runner. When a task is executed the appropriate TaskRunner is launched along with a copy of the script to be executed. This behaviour ensures that each script runs in its own process in 
\b \expnd0\expndtw0\kerning0
Tier 3
\b0 \expnd0\expndtw0\kerning0
 and cannot bring down the server in 
\b \expnd0\expndtw0\kerning0
Tier 2
\b0 \expnd0\expndtw0\kerning0
.\
{\listtext	4.	}KosmicTask supports both in and out of process scripting. Those scripts that run in process (such as AppleScript and the Cocoa bridge components detailed below) are loaded and executed with the Task Runner in 
\b \expnd0\expndtw0\kerning0
Tier 3
\b0 \expnd0\expndtw0\kerning0
. Scripts that are run out of process, such as the majority of the command line derived scripting components, are executed in 
\b \expnd0\expndtw0\kerning0
Tier 4
\b0 \expnd0\expndtw0\kerning0
 as instances of individual scripting subsystems.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 \
When a task execution is requested information is passed down through the tiers, the task is executed in the relevant task runner, and the task results are then returned to the user.\
\
KosmicTask can be configured to load just the server component when a user logs in so that other network users always have access.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Application Tasks and User Tasks\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask comes preinstalled with a number of general utility tasks known as 
\b \expnd0\expndtw0\kerning0
Application Task
\b0 \expnd0\expndtw0\kerning0
s. The majority of these are written in AppleScript. 
\b \expnd0\expndtw0\kerning0
Application Tasks
\b0 \expnd0\expndtw0\kerning0
 cannot be edited or deleted but they can be duplicated.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 Tasks created by the user are identified as 
\b \expnd0\expndtw0\kerning0
User Tasks
\b0 \expnd0\expndtw0\kerning0
. These can be created, edited and deleted by the user.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Resource Browser\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 In KosmicTask each scripting language is implemented as a separate plug-in bundle. The application 
\b \expnd0\expndtw0\kerning0
Resource Browser
\b0 \expnd0\expndtw0\kerning0
 provides access to the resources supplied by each language plug-in. These resources include:\
\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls4\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	\'95	}A number of task templates (see below).\
{\listtext	\'95	}A number of informational documents.\
{\listtext	\'95	}A default list of property settings.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 \
The informational documents generally provide links to web based sources of information for the represented language. A usage document provides an overview of how to accomplish basic tasks using the language. This document is intended to accompany and expand upon the information contained with the individual templates. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 Each language also defines a default set of property settings. Most of these are read only and define the specific properties of the language plug-in. Several read-write properties also exist, such as the path to OS X scripting subsystems and task function and class names. These read-write properties can be overridden for individual templates and tasks. Selecting a property from the property list will display a short explanation of its purpose below the list.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Template Support\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 In order to aid user task creation a number of task templates are available through the application Resource Browser. These templates serve to indicate the basic syntax required in each scripting language to achieve a particular objective. In general, all of the distinctive features of KosmicTask are available as a template in each scripting language. Each template includes the script code, the settings necessary to configure the script and an informational document.\
\
Often the best way to find out how to accomplish a particular task is to examine the available templates. The simplest template - Hello Kosmos - simple returns Hello Kosmos! to the user. Other templates indicate how to return complex objects and files as results while others detail features such as class creation and application automation.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 In addition to the templates that are supplied with the application (the Application Templates) the user may define any number of additional templates.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Task Inputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask provides a number of plugin based inputs that provide an effective means of acquiring the input to a task. Any number and selection of input types can be defined to provide the parameters for a given task. \
\
The standard input types are:\
\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls5\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	\'95	}Date\
{\listtext	\'95	}File Contents\
{\listtext	\'95	}List Item\
{\listtext	\'95	}Number\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\sa800\pardirnatural
\ls5\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	\'95	}Text\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Task Results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 \
When a task completes it may generate a result that is returned to the user. Task results may consist of simple object such as text string or a number. More complex results containing data such as arrays and dictionaries (aka associative arrays or hashes or maps) can also be returned.\
\
Complex results also permit the returning of the contents of a file or files as all or part of a result. Complex results retain their structure when presented to the user and thus can be navigated using an outline controller. More importantly, the results can be saved as external XML files or property lists that maintain the result content and structure.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 In addition, CSS based style commands can be embedded in complex results in order to provide result styling.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Complex Task Results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 Complex task results are generally returned as YAML formatted strings. YAML (YAML Ain't Markup Language or Yet Another Markup Language) is a straight forward human readable way of representing complex data types containing strings, scalars, arrays and dictionaries. Its simple syntax makes it easy for traditional command line scripting languages like Bash to generate complex results simply by printing YAML formatted strings to their standard output.\
\
YAML is a popular method of representing data relationships and bindings exist for many scripting languages. KosmicTask makes use of these bindings for Java, JavaScript, Perl, Php, Python and Ruby within application defined controller objects. These controller objects handle the translation between the scripts native data structure and YAML. Thus the task produces its result as a native data structure and then passes it over to the controller for formatting. This YAML formatted result is then returned to the user.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 See below for the even simpler way in which Cocoa based tasks can return complex results.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Application Defined Scripting Resources\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 A scripting language plugin can define additional resources to assist with script building and task control.\
\
Most scripting languages provide some means of validating a script prior to its execution. This functionality is invoked by KosmicTask whenever a task build is requested. Some languages lack this integrated facility and rely on additional tools to provide external validation. A language plugin may optionally include such a tool and invoke it during the build stage.  \
\
Scripts that run in-process with their task runner normally have access to a KosmicTask supplied controller object. This object is designed to allow the task to interface with the task runner. The controller is generally an object written in the target scripting language. In some cases the task will have to explicitly create a reference to or an instance of the controller object. In other cases the controller object will be pre -defined with the tasks scope.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 A language plugin can also provide access to additional scripting facilities. This is the case with appscript which is supplied with the Ruby and Python plug-ins to provide an additional automation interface.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Task File Handling\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask permits the contents of any number of files to be passed as inputs and/or returned as results. File contents are passed as inputs using the File Contents input type. When the task is executed the file contents are transferred to the target machine and temporarily stored. The path to this temporary file as passed as the actual task input parameter enabling the task to access the file data.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 File contents are returned as results by returning a dictionary type result that contains a kosmicFile key defining the file or files whose contents are to be returned to the user.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Temporary File Handling\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 A task may return the contents of a pre existing file as a result or it may wish to return the contents of a temporary file that has been generated by the task. To assist with this KosmicTask provides a number of ways of requesting temporary file storage. File storage allocated in these way will only exist for the lifetime of the task and will be deleted from the host machine when the task terminates.\
\
A path to a temporary file or files may be requested in three different ways dependent on the nature of the scripting language plugin.\
\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls6\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	1.	}Command line based scripting languages simply need to create files in the task's initial working directory.\
{\listtext	2.	}Most in process tasks can call the resultFileWithName function on a KosmicTask supplier controller object.\
{\listtext	3.	}Scripts which send Apple events can send the "result file with name <basename>" command to the KosmicTask application object.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 The easiest way to determine what method to use for a particular scripting language is to examine the 'file' or 'files' template or read the usage document in the Resource Browser.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Scripting Language Support\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask uses an extensible plug-in architecture to support a wide range of scripting languages. By design support is included for all the scripting languages that are present as part of a standard OS X 10.6 installation. When such a task is executed its script is passed to the local scripting subsystem for execution.\
\
In addition, KosmicTask includes a number of additional scripting languages. Support for these languages is wholly embedded in the application bundle and nothing is installed outside of the application itself.\
\
KosmicTask supports both interpreted scripting languages (such as Php and Perl) and those that are compiled (such as AppleScript and Java).\
\
Support is also included for a number of Cocoa bridges. These bridges are extremely powerful and enable scripts to access all the power and functionality of the OS X Cocoa framework. \
\
KosmicTask supports the scripting of tasks in the following languages:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b \cf4 \expnd0\expndtw0\kerning0
\strokec4 AppleScript\
Bash
\b0 \expnd0\expndtw0\kerning0
 shell\

\b \expnd0\expndtw0\kerning0
C
\b0 \expnd0\expndtw0\kerning0
 shell\

\b \expnd0\expndtw0\kerning0
C
\b0 \expnd0\expndtw0\kerning0
 (embedded)\

\b \expnd0\expndtw0\kerning0
C++
\b0 \expnd0\expndtw0\kerning0
 (embedded)\

\b \expnd0\expndtw0\kerning0
Java\
Javascript\
Korn
\b0 \expnd0\expndtw0\kerning0
 shell\

\b \expnd0\expndtw0\kerning0
Lua
\b0 \expnd0\expndtw0\kerning0
 (embedded)\

\b \expnd0\expndtw0\kerning0
Perl\
PHP\
Python\
Ruby\
Tcl\
Tenex
\b0 \expnd0\expndtw0\kerning0
 C shell\

\b \expnd0\expndtw0\kerning0
Z
\b0 \expnd0\expndtw0\kerning0
 shell\
\
(C and C++ interpreted scripting support is provided by CINT)\
\
KosmicTask supports Cocoa framework scripting using the following bridges and components:\
\

\b \expnd0\expndtw0\kerning0
AppleScriptObjC
\b0 \expnd0\expndtw0\kerning0
		AppleScript bridge\

\b \expnd0\expndtw0\kerning0
F-Script
\b0 \expnd0\expndtw0\kerning0
 (embedded)		F-Script Cocoa scripting environment\

\b \expnd0\expndtw0\kerning0
JSCocoa
\b0 \expnd0\expndtw0\kerning0
 (embedded)		JavaScript bridge\

\b \expnd0\expndtw0\kerning0
LuaCocoa
\b0 \expnd0\expndtw0\kerning0
 (embedded)		Lua bridge\

\b \expnd0\expndtw0\kerning0
PyObjC
\b0 \expnd0\expndtw0\kerning0
				Python bridge\

\b \expnd0\expndtw0\kerning0
RubyCocoa
\b0 \expnd0\expndtw0\kerning0
			Ruby bridge\
\
Within KosmicTask these components are represented by the following standardised names (in the order as listed above):\
\

\b \expnd0\expndtw0\kerning0
AppleScript Cocoa\
F-Script Cocoa\
JavaScript Cocoa\
Lua Cocoa\
Python Cocoa\
Ruby Cocoa\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Cocoa Based Tasks\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 Cocoa based tasks have a great advantage when it comes to generating task results in that they can returned native data structures. KosmicTask will receive the result via the bridge and return it to the user.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 Thus, Cocoa based tasks can generate complex results using the relevant scripting language native data structures such as arrays and dictionaries. Native dictionaries can be used to provide a fast and efficient way of returning the contents of files as results.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Cocoa Based Application Tasks\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 Tasks which utilise the Cocoa framework are run as fully fledged Cocoa applications. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 Many Cocoa components require the existence of a run loop in order to be utilised to their full potential. Normally, application tasks exit when the function that launches them exists. Cocoa based tasks, however, can request that they be allowed to continue running in order to receive further input from runloop sources. When the task determines that it is complete it terminates itself and the task results are returned to the user.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Comparing Standard and Cocoa Based Language Implementations\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 The differences between the standard and Cocoa variants of any scripting language can be summarised as follows:\
\
\pard\tx586\tx870\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li850\fi-284\sl312\slmult1\pardirnatural
\ls7\ilvl0\cf4 \expnd0\expndtw0\kerning0
\strokec4 {\listtext	1.	}Most standard scripting components run as external command line based process (though the likes of JavaScript does not).\
{\listtext	2.	}The standard scripting components are less complex and will load faster than the Cocoa variants.\
{\listtext	3.	}The Cocoa based scripting components run in process with their task runner.\
{\listtext	4.	}The Cocoa based scripting components will generally use more system resources than the standard components. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 \
We can take the examples of Ruby and RubyCocoa to illustrate the above points.\
\
When a standard Ruby task is executed an instance of the KosmicTaskRubyRunner program is launched (this will be visible in the Activity Monitor application). This program receives the task request from the KosmicTask server component and launches a separate instance of the Ruby command line system (also visible in the Activity Monitor). The task runner passes the task inputs to Ruby and waits for the task results to be returned. When the Ruby instance terminates the task runner formats the task results and returns them to the server component which then transfers them via the network to the user.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 When a RubyCocoa task is executed an instance of the KosmicTaskRubyCocoaRunner program is launched. This program executes as a fully fledged Cocoa application complete with runloop. Once successfully launched the task runner loads the Cocoa task into its own process space and executes the designated run function on the designated run class. When the initial run function returns the task runner checks the status of the KosmicTaskController keepTaskAlive property. If the task requests that it be kept alive then the task is allowed to continue executing until it calls the KosmicTaskController stopTask: method. If the task does not request to be kept alive then the task run loop is stopped immediately.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Automation Support and System-wide Scripting\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 OS X provides a powerful mechanism for automating and controlling system resources and applications using Apple events. AppleScript has been the traditional means of achieving this but now there are other powerful and more intuitive alternatives.\
\
OS X includes a technology called Scripting Bridge which allows Cocoa based applications to automate other services by sending Apple events. All of the Cocoa capable scripting components supported by KosmicTask can utilise this technology to achieve automation. Scripting Bridge therefore means that automation can be achieved by a much wider range of scripting languages than was previously possible.\
\
But there is another alternative\'85\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa800\pardirnatural
\cf4 \expnd0\expndtw0\kerning0
\strokec4 Apple events are complex and the desired interaction between the controlling script and the targeted application or service can sometimes be difficult to achieve. The appscript component, which is available to the Python and Ruby scripting components, provides an alternative means of generating, sending and interpreting Apple events.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\sa180\pardirnatural

\b\fs26 \cf3 \expnd0\expndtw0\kerning0
\strokec3 Security\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\b0\fs20 \cf4 \expnd0\expndtw0\kerning0
\strokec4 KosmicTask uses Transport Layer Security (the successor to SSL) to provide secure network communication. The OS X keychain is used for secure password storage and retrieval.
\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 \
\pard\tqr\tx9626\pardeftab720\sl312\slmult1\sa180\qr\pardirnatural

\f0\fs18 \cf3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec3 12
\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\pardirnatural

\f1\fs18 \cf0 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec0 Copyright Mugginsoft LLP 2011
\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 
\f0\fs14 \cf0 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec0 Mugginsoft
\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 
\f0\fs14 \cf0 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec0 MugginsoftMugginsoft
\f2\fs72 \cf3 \expnd0\expndtw0\kerning0
\strokec3 mugginsoft\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\qc\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\strokec0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl312\slmult1\qc\pardirnatural

\f0\fs14 \expnd0\expndtw0\kerning0
Mugginsoft
\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 
\f0\fs14 \cf0 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec0 Mugginsoft
\f4\fs24 \cf0 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 }